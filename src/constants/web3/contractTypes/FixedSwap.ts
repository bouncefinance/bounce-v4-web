/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BounceFixedSwap {
  export type PoolStruct = {
    creator: PromiseOrValue<string>;
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    amountTotal0: PromiseOrValue<BigNumberish>;
    amountTotal1: PromiseOrValue<BigNumberish>;
    openAt: PromiseOrValue<BigNumberish>;
    closeAt: PromiseOrValue<BigNumberish>;
    claimAt: PromiseOrValue<BigNumberish>;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    creator: string;
    token0: string;
    token1: string;
    amountTotal0: BigNumber;
    amountTotal1: BigNumber;
    openAt: number;
    closeAt: number;
    claimAt: number;
  };

  export type CreateReqStruct = {
    name: PromiseOrValue<string>;
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    amountTotal0: PromiseOrValue<BigNumberish>;
    amountTotal1: PromiseOrValue<BigNumberish>;
    openAt: PromiseOrValue<BigNumberish>;
    closeAt: PromiseOrValue<BigNumberish>;
    claimAt: PromiseOrValue<BigNumberish>;
    maxAmount1PerWallet: PromiseOrValue<BigNumberish>;
    whitelistRoot: PromiseOrValue<BytesLike>;
  };

  export type CreateReqStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    string
  ] & {
    name: string;
    token0: string;
    token1: string;
    amountTotal0: BigNumber;
    amountTotal1: BigNumber;
    openAt: number;
    closeAt: number;
    claimAt: number;
    maxAmount1PerWallet: BigNumber;
    whitelistRoot: string;
  };
}

export interface FixedSwapInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "TX_FEE_DENOMINATOR()": FunctionFragment;
    "amountSwap0P(uint256)": FunctionFragment;
    "amountSwap1P(uint256)": FunctionFragment;
    "create((string,address,address,uint256,uint256,uint48,uint48,uint48,uint256,bytes32),uint256,bytes)": FunctionFragment;
    "creatorClaim(uint256)": FunctionFragment;
    "creatorClaimedP(uint256)": FunctionFragment;
    "filledAtP(uint256)": FunctionFragment;
    "getPoolCount()": FunctionFragment;
    "initialize(uint256,address,address)": FunctionFragment;
    "maxAmount1PerWalletP(uint256)": FunctionFragment;
    "myAmountSwapped0(address,uint256)": FunctionFragment;
    "myAmountSwapped1(address,uint256)": FunctionFragment;
    "myClaimed(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolMessages(address,bytes32)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reverse(uint256,uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "setStakeContract(address)": FunctionFragment;
    "setTxFeeRatio(uint256)": FunctionFragment;
    "signer()": FunctionFragment;
    "stakeContract()": FunctionFragment;
    "swap(uint256,uint256,bytes32[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "txFeeRatio()": FunctionFragment;
    "userClaim(uint256)": FunctionFragment;
    "whitelistRootP(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "TX_FEE_DENOMINATOR"
      | "amountSwap0P"
      | "amountSwap1P"
      | "create"
      | "creatorClaim"
      | "creatorClaimedP"
      | "filledAtP"
      | "getPoolCount"
      | "initialize"
      | "maxAmount1PerWalletP"
      | "myAmountSwapped0"
      | "myAmountSwapped1"
      | "myClaimed"
      | "owner"
      | "poolMessages"
      | "pools"
      | "renounceOwnership"
      | "reverse"
      | "setSigner"
      | "setStakeContract"
      | "setTxFeeRatio"
      | "signer"
      | "stakeContract"
      | "swap"
      | "transferOwnership"
      | "txFeeRatio"
      | "userClaim"
      | "whitelistRootP"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "TX_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountSwap0P",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountSwap1P",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BounceFixedSwap.CreateReqStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorClaimedP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAtP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAmount1PerWalletP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "myAmountSwapped0",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "myAmountSwapped1",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "myClaimed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolMessages",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverse",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxFeeRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "txFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRootP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TX_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountSwap0P",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountSwap1P",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorClaimedP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "filledAtP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAmount1PerWalletP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myAmountSwapped0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myAmountSwapped1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reverse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTxFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFeeRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRootP",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Created(uint256,address,tuple,string,bytes32,uint256)": EventFragment;
    "CreatorClaimed(uint256,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reversed(uint256,address,uint256,uint256)": EventFragment;
    "Swapped(uint256,address,uint256,uint256)": EventFragment;
    "UserClaimed(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reversed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserClaimed"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CreatedEventObject {
  index: BigNumber;
  sender: string;
  pool: BounceFixedSwap.PoolStructOutput;
  name: string;
  whitelistRoot: string;
  maxAmount1PerWallet: BigNumber;
}
export type CreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BounceFixedSwap.PoolStructOutput,
    string,
    string,
    BigNumber
  ],
  CreatedEventObject
>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export interface CreatorClaimedEventObject {
  index: BigNumber;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
  txFee: BigNumber;
}
export type CreatorClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  CreatorClaimedEventObject
>;

export type CreatorClaimedEventFilter = TypedEventFilter<CreatorClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReversedEventObject {
  index: BigNumber;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type ReversedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  ReversedEventObject
>;

export type ReversedEventFilter = TypedEventFilter<ReversedEvent>;

export interface SwappedEventObject {
  index: BigNumber;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type SwappedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  SwappedEventObject
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface UserClaimedEventObject {
  index: BigNumber;
  sender: string;
  amount0: BigNumber;
}
export type UserClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UserClaimedEventObject
>;

export type UserClaimedEventFilter = TypedEventFilter<UserClaimedEvent>;

export interface FixedSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    TX_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountSwap0P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    amountSwap1P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    create(
      poolReq: BounceFixedSwap.CreateReqStruct,
      expireAt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorClaimedP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    filledAtP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      _stakeContract: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxAmount1PerWalletP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myAmountSwapped0(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myAmountSwapped1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    myClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolMessages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, number, number, number] & {
        creator: string;
        token0: string;
        token1: string;
        amountTotal0: BigNumber;
        amountTotal1: BigNumber;
        openAt: number;
        closeAt: number;
        claimAt: number;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reverse(
      index: PromiseOrValue<BigNumberish>,
      amount0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakeContract(
      _stakeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTxFeeRatio(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    stakeContract(overrides?: CallOverrides): Promise<[string]>;

    swap(
      index: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    txFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    userClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistRootP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  TX_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  amountSwap0P(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amountSwap1P(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  create(
    poolReq: BounceFixedSwap.CreateReqStruct,
    expireAt: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorClaim(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorClaimedP(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  filledAtP(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _txFeeRatio: PromiseOrValue<BigNumberish>,
    _stakeContract: PromiseOrValue<string>,
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxAmount1PerWalletP(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myAmountSwapped0(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myAmountSwapped1(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  myClaimed(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolMessages(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, number, number, number] & {
      creator: string;
      token0: string;
      token1: string;
      amountTotal0: BigNumber;
      amountTotal1: BigNumber;
      openAt: number;
      closeAt: number;
      claimAt: number;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reverse(
    index: PromiseOrValue<BigNumberish>,
    amount0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakeContract(
    _stakeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTxFeeRatio(
    _txFeeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeContract(overrides?: CallOverrides): Promise<string>;

  swap(
    index: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  txFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  userClaim(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistRootP(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    TX_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    amountSwap0P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountSwap1P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      poolReq: BounceFixedSwap.CreateReqStruct,
      expireAt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    creatorClaimedP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    filledAtP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      _stakeContract: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAmount1PerWalletP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myAmountSwapped0(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myAmountSwapped1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolMessages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, number, number, number] & {
        creator: string;
        token0: string;
        token1: string;
        amountTotal0: BigNumber;
        amountTotal1: BigNumber;
        openAt: number;
        closeAt: number;
        claimAt: number;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reverse(
      index: PromiseOrValue<BigNumberish>,
      amount0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeContract(
      _stakeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTxFeeRatio(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    stakeContract(overrides?: CallOverrides): Promise<string>;

    swap(
      index: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    txFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    userClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRootP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Created(uint256,address,tuple,string,bytes32,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null,
      name?: null,
      whitelistRoot?: null,
      maxAmount1PerWallet?: null
    ): CreatedEventFilter;
    Created(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      pool?: null,
      name?: null,
      whitelistRoot?: null,
      maxAmount1PerWallet?: null
    ): CreatedEventFilter;

    "CreatorClaimed(uint256,address,uint256,uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      txFee?: null
    ): CreatorClaimedEventFilter;
    CreatorClaimed(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      txFee?: null
    ): CreatorClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Reversed(uint256,address,uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): ReversedEventFilter;
    Reversed(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): ReversedEventFilter;

    "Swapped(uint256,address,uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): SwappedEventFilter;
    Swapped(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null
    ): SwappedEventFilter;

    "UserClaimed(uint256,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null
    ): UserClaimedEventFilter;
    UserClaimed(
      index?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      amount0?: null
    ): UserClaimedEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    TX_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    amountSwap0P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountSwap1P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      poolReq: BounceFixedSwap.CreateReqStruct,
      expireAt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorClaimedP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filledAtP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      _stakeContract: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxAmount1PerWalletP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myAmountSwapped0(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myAmountSwapped1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolMessages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reverse(
      index: PromiseOrValue<BigNumberish>,
      amount0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakeContract(
      _stakeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTxFeeRatio(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    stakeContract(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      index: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    txFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    userClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistRootP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    TX_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountSwap0P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountSwap1P(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      poolReq: BounceFixedSwap.CreateReqStruct,
      expireAt: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorClaimedP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filledAtP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      _stakeContract: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxAmount1PerWalletP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myAmountSwapped0(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myAmountSwapped1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myClaimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolMessages(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reverse(
      index: PromiseOrValue<BigNumberish>,
      amount0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakeContract(
      _stakeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTxFeeRatio(
      _txFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      index: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    txFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userClaim(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRootP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
